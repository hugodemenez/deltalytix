datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

model Trade {
  id             String   @id @unique @default(uuid())
  accountNumber  String
  quantity       Int
  entryId        String? @default("")
  closeId        String? @default("")
  instrument     String
  entryPrice     String
  closePrice     String
  entryDate      String
  closeDate      String
  pnl            Float
  timeInPosition Float    @default(0)
  userId         String
  side           String?  @default("")
  commission     Float    @default(0)
  createdAt      DateTime @default(now())
  comment        String?
  tags           String[] @default([])
  imageBase64    String?  @db.Text

  @@index([accountNumber])
  @@schema("public")
}

model TickDetails{
  id String @id @unique @default(uuid())
  ticker String
  tickValue Float
  tickSize Float
  @@schema("public")
}

model Subscription {
  id        String    @id @unique @default(uuid())
  email     String    @unique
  plan      String
  createdAt DateTime  @default(now())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  status    String    @default("ACTIVE")
  endDate   DateTime?
  trialEndsAt DateTime?
  feedback  SubscriptionFeedback[]

  @@index([email])
  @@schema("public")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  createdAt   DateTime @default(now())
  readAt      DateTime?
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@schema("public")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  auth_user_id    String           @unique
  notifications   Notification[]
  subscriptions   Subscription?
  accounts        Account[]
  dashboardLayout DashboardLayout?

  @@index([email])
  @@schema("public")
}

model Account {
  id                String    @id @unique @default(uuid())
  number            String
  propfirm          String    @default("")
  drawdownThreshold Float     @default(0)
  trailingDrawdown  Boolean   @default(false)
  trailingStopProfit Float?   
  profitTarget      Float     @default(0)
  startingBalance   Float     @default(0)
  isPerformance     Boolean   @default(false)
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  createdAt         DateTime  @default(now())
  payoutCount       Int       @default(0)
  resetDate         DateTime?
  payouts           Payout[]

  @@unique([number, userId])
  @@index([number])
  @@schema("public")
}

model Payout {
  id            String    @id @default(uuid())
  amount        Float
  date          DateTime
  accountNumber String    
  account       Account   @relation(fields: [accountId], references: [id])
  accountId     String
  createdAt     DateTime  @default(now())
  status        String    @default("PENDING")
  
  @@index([accountNumber])
  @@schema("public")
}

model DashboardLayout {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [auth_user_id])
  desktop   Json     @default("[]")
  mobile    Json     @default("[]")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@schema("public")
}

model SubscriptionFeedback {
  id                 String       @id @default(uuid())
  email             String
  event             String
  cancellationReason String?
  feedback          String?      // For both feedback and comment from Stripe
  createdAt         DateTime     @default(now())
  subscription      Subscription @relation(fields: [email], references: [email])

  @@index([email])
  @@schema("public")
}
