generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model Trade {
  id                String   @id @unique @default(uuid())
  accountNumber     String
  quantity          Int
  entryId           String?  @default("")
  closeId           String?  @default("")
  instrument        String
  entryPrice        String
  closePrice        String
  entryDate         String
  closeDate         String
  pnl               Float
  timeInPosition    Float    @default(0)
  userId            String
  side              String?  @default("")
  commission        Float    @default(0)
  createdAt         DateTime @default(now())
  comment           String?
  tags              String[] @default([])
  imageBase64       String?
  videoUrl          String?
  imageBase64Second String?
  groupId           String?  @default("")
  images            String[] @default([])

  @@index([accountNumber])
  @@index([groupId])
  @@schema("public")
}

model TickDetails {
  id        String @id @unique @default(uuid())
  ticker    String
  tickValue Float
  tickSize  Float

  @@schema("public")
}

model Subscription {
  id          String    @id @unique @default(uuid())
  email       String    @unique
  plan        String
  createdAt   DateTime  @default(now())
  userId      String    @unique
  endDate     DateTime?
  status      String    @default("ACTIVE")
  trialEndsAt DateTime?
  interval    String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@schema("public")
}

model Notification {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String
  createdAt   DateTime  @default(now())
  readAt      DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@schema("public")
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  auth_user_id      String            @unique
  isFirstConnection Boolean           @default(true)
  etpToken          String?
  isBeta            Boolean           @default(false)
  language          String            @default("en")
  thorToken         String?
  accounts          Account[]
  businesses        Business[]
  comments          Comment[]
  dashboardLayout   DashboardLayout?
  groups            Group[]
  moods             Mood[]
  notifications     Notification[]
  orders            Order[]
  posts             Post[]
  subscriptions     Subscription?
  synchronizations  Synchronization[]
  tags              Tag[]
  votes             Vote[]

  @@index([email])
  @@schema("public")
}

model Synchronization {
  id             String    @id @default(uuid())
  userId         String
  service        String
  accountId      String
  lastSyncedAt   DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  token          String?
  tokenExpiresAt DateTime?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, service, accountId])
  @@index([userId])
  @@index([service])
  @@schema("public")
}

model Business {
  id          String               @id @default(uuid())
  name        String
  userId      String
  traderIds   String[]             @default([])
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  invitations BusinessInvitation[]
  managers    BusinessManager[]

  @@unique([name, userId])
  @@index([userId])
  @@schema("public")
}

model BusinessManager {
  id         String   @id @default(uuid())
  businessId String
  managerId  String
  access     String   @default("viewer")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, managerId])
  @@index([businessId])
  @@index([managerId])
  @@schema("public")
}

model BusinessInvitation {
  id         String   @id @default(uuid())
  businessId String
  email      String
  invitedBy  String
  status     String   @default("PENDING")
  expiresAt  DateTime @default(dbgenerated("(now() + '7 days'::interval)"))
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, email])
  @@index([businessId])
  @@index([email])
  @@index([status])
  @@schema("public")
}

model Group {
  id        String    @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@index([userId])
  @@schema("public")
}

model Account {
  id                      String            @id @unique @default(uuid())
  number                  String
  propfirm                String            @default("")
  drawdownThreshold       Float             @default(0)
  profitTarget            Float             @default(0)
  isPerformance           Boolean           @default(false)
  userId                  String
  createdAt               DateTime          @default(now())
  startingBalance         Float             @default(0)
  payoutCount             Int               @default(0)
  trailingDrawdown        Boolean           @default(false)
  trailingStopProfit      Float?
  resetDate               DateTime?
  consistencyPercentage   Float?            @default(30)
  groupId                 String?
  accountSize             String?
  accountSizeName         String?
  activationFees          Float?
  balanceRequired         Float?
  dailyLoss               Float?
  evaluation              Boolean           @default(true)
  isRecursively           String?
  maxFundedAccounts       Int?
  maxPayout               String?
  minDays                 Int?
  minPayout               Float?
  minTradingDaysForPayout Int?
  payoutBonus             Float?
  payoutPolicy            String?
  price                   Float?
  priceWithPromo          Float?
  profitSharing           Float?
  rulesDailyLoss          String?
  tradingNewsAllowed      Boolean           @default(true)
  trailing                String?
  autoRenewal             Boolean           @default(false)
  nextPaymentDate         DateTime?
  paymentFrequency        PaymentFrequency?
  promoPercentage         Float?
  promoType               PromoType?
  renewalNotice           Int?
  minPnlToCountAsDay      Float?
  group                   Group?            @relation(fields: [groupId], references: [id])
  user                    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  payouts                 Payout[]

  @@unique([number, userId])
  @@index([number])
  @@index([groupId])
  @@index([nextPaymentDate])
  @@schema("public")
}

model Payout {
  id            String   @id @default(uuid())
  amount        Float
  date          DateTime
  createdAt     DateTime @default(now())
  status        String   @default("PENDING")
  accountNumber String
  accountId     String
  account       Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountNumber])
  @@schema("public")
}

model DashboardLayout {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  desktop   Json     @default("[]")
  mobile    Json     @default("[]")
  user      User     @relation(fields: [userId], references: [auth_user_id], onDelete: Cascade)

  @@index([userId])
  @@schema("public")
}

model SubscriptionFeedback {
  id                 String   @id @default(uuid())
  email              String
  event              String
  createdAt          DateTime @default(now())
  cancellationReason String?
  feedback           String?

  @@index([email])
  @@schema("public")
}

model Mood {
  id                   String   @id @default(uuid())
  userId               String
  day                  DateTime
  mood                 String
  conversation         Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  emotionValue         Int      @default(50)
  hasTradingExperience Boolean?
  journalContent       String?
  selectedNews         String[] @default([])
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, day])
  @@index([userId])
  @@index([day])
  @@schema("public")
}

model Shared {
  id             String    @id @default(uuid())
  userId         String
  slug           String    @unique
  title          String?
  description    String?
  createdAt      DateTime  @default(now())
  expiresAt      DateTime?
  isPublic       Boolean   @default(true)
  viewCount      Int       @default(0)
  accountNumbers String[]
  dateRange      Json
  desktop        Json      @default("[]")
  mobile         Json      @default("[]")

  @@index([userId])
  @@index([slug])
  @@schema("public")
}

model FinancialEvent {
  id          String   @id @default(uuid())
  title       String
  date        DateTime
  importance  String
  type        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sourceUrl   String?
  country     String?
  lang        String   @default("fr")
  timezone    String   @default("UTC")

  @@unique([title, date, lang, timezone])
  @@index([date])
  @@schema("public")
}

model Tag {
  id          String   @id @default(uuid())
  name        String
  description String?
  color       String?  @default("#CBD5E1")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@index([userId])
  @@schema("public")
}

model Newsletter {
  email     String  @id @unique
  isActive  Boolean @default(true)
  firstName String?
  lastName  String?

  @@index([email])
  @@schema("public")
}

model Post {
  id          String     @id @default(uuid())
  title       String
  content     String
  type        PostType   @default(FEATURE_REQUEST)
  status      PostStatus @default(OPEN)
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  screenshots String[]   @default([])
  comments    Comment[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes       Vote[]

  @@index([userId])
  @@index([type])
  @@index([status])
  @@schema("public")
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  postId    String
  userId    String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
  @@index([parentId])
  @@schema("public")
}

model Vote {
  id        String   @id @default(uuid())
  type      VoteType
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
  @@schema("public")
}

model Order {
  id                 String   @id @default(uuid())
  accountId          String
  orderId            String   @unique
  orderAction        String
  quantity           Int
  averageFilledPrice Float
  isOpeningOrder     Boolean
  time               DateTime
  symbol             String
  instrumentType     String
  userId             String
  createdAt          DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([userId])
  @@schema("public")
}

model TradeAnalytics {
  id                 String   @id @default(uuid())
  tradeId            String   @unique
  mae                Float    @default(0)
  mfe                Float    @default(0)
  entryPriceFromData Float?
  priceDifference    Float?
  riskRewardRatio    Float?
  efficiency         Float?
  dataSource         String   @default("DATABENTO")
  computedAt         DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([tradeId])
  @@index([computedAt])
  @@schema("public")
}

model HistoricalData {
  id             String   @id @default(uuid())
  symbol         String
  databentSymbol String
  timestamp      DateTime
  open           Float
  high           Float
  low            Float
  close          Float
  volume         Int
  dataSource     String   @default("DATABENTO")
  createdAt      DateTime @default(now())

  @@unique([symbol, databentSymbol, timestamp])
  @@index([symbol])
  @@index([databentSymbol])
  @@index([timestamp])
  @@schema("public")
}

enum PostType {
  FEATURE_REQUEST
  BUG_REPORT
  DISCUSSION

  @@schema("public")
}

enum PostStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CLOSED

  @@schema("public")
}

enum VoteType {
  UPVOTE
  DOWNVOTE

  @@schema("public")
}

enum PaymentFrequency {
  MONTHLY
  QUARTERLY
  BIANNUAL
  ANNUAL
  CUSTOM

  @@schema("public")
}

enum PromoType {
  DIRECT
  PERCENTAGE

  @@schema("public")
}
