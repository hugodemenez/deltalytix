---
description: 
globs: 
alwaysApply: false
---
# MAE/MFE Computation with Databento Integration

This document explains how to compute Maximum Adverse Excursion (MAE) and Maximum Favorable Excursion (MFE) for your trading data using Databento historical futures data.

## Overview

**MAE (Maximum Adverse Excursion)**: The maximum loss that occurred during the life of a trade - how far the price moved against your position before it closed.

**MFE (Maximum Favorable Excursion)**: The maximum profit that occurred during the life of a trade - how far the price moved in your favor before it closed.

These metrics help you understand:
- Risk management effectiveness
- Exit timing optimization
- Position sizing strategies
- Overall trading efficiency

## Setup Requirements

### 1. Databento API Key

1. Sign up for a Databento account at [databento.com](https://databento.com)
2. Get your API key from the dashboard
3. Add it to your environment variables:

```bash
# Add to your .env.local file
DATABENTO_API_KEY=your_databento_api_key_here
```

### 2. Database Schema Update

The system includes new Prisma models for storing analytics data:

```prisma
model TradeAnalytics {
  id                String   @id @default(uuid())
  tradeId           String   @unique
  mae               Float    @default(0) // Maximum Adverse Excursion
  mfe               Float    @default(0) // Maximum Favorable Excursion
  entryPriceFromData Float?  // Actual entry price from market data
  priceDifference   Float?   // Difference between reported and actual entry price
  riskRewardRatio   Float?   // Risk/Reward ratio
  efficiency        Float?   // How much of the favorable move was captured
  dataSource        String   @default("DATABENTO")
  computedAt        DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model HistoricalData {
  id            String   @id @default(uuid())
  symbol        String   // Original symbol (e.g., "ES", "NQ")
  databentSymbol String  // Databento symbol (e.g., "ES.FUT.CME")
  timestamp     DateTime
  open          Float
  high          Float
  low           Float
  close         Float
  volume        Int
  dataSource    String   @default("DATABENTO")
  createdAt     DateTime @default(now())
}
```

Run the migration:
```bash
npx prisma db push
npx prisma generate
```

## Supported Futures Instruments

The system currently supports major futures contracts:

### Index Futures
- **ES** (E-mini S&P 500) → ES.FUT.CME
- **NQ** (E-mini Nasdaq) → NQ.FUT.CME  
- **YM** (E-mini Dow) → YM.FUT.CME
- **RTY** (E-mini Russell 2000) → RTY.FUT.CME
- **MES** (Micro E-mini S&P 500) → MES.FUT.CME
- **MNQ** (Micro E-mini Nasdaq) → MNQ.FUT.CME

### Energy Futures
- **CL** (Crude Oil) → CL.FUT.NYMEX
- **NG** (Natural Gas) → NG.FUT.NYMEX
- **QM** (E-mini Crude Oil) → QM.FUT.NYMEX

### Metal Futures  
- **GC** (Gold) → GC.FUT.COMEX
- **SI** (Silver) → SI.FUT.COMEX
- **HG** (Copper) → HG.FUT.COMEX

### Currency Futures
- **6E** (Euro) → 6E.FUT.CME
- **6J** (Japanese Yen) → 6J.FUT.CME
- **6B** (British Pound) → 6B.FUT.CME

### Bond Futures
- **ZB** (30-Year Treasury Bond) → ZB.FUT.CBOT
- **ZN** (10-Year Treasury Note) → ZN.FUT.CBOT
- **ZF** (5-Year Treasury Note) → ZF.FUT.CBOT

## Usage Examples

### 1. Test with Mock Data

Test the system without API calls:

```bash
GET /api/test-mae-mfe
```

**Response Example:**
```json
{
  "success": true,
  "mode": "mock_data",
  "trade": {
    "id": "example-trade-1",
    "instrument": "ES",
    "entryPrice": "4500.75",
    "closePrice": "4510.25",
    "entryDate": "2024-01-15T09:30:00.000Z",
    "closeDate": "2024-01-15T10:15:00.000Z",
    "side": "BUY",
    "quantity": 1
  },
  "results": {
    "mae": 5.5,
    "mfe": 14.5,
    "entryPriceFromData": 4500.75,
    "priceDifference": 0,
    "riskRewardRatio": 2.64,
    "efficiency": 65.5,
    "maeInDollars": 275.00,
    "mfeInDollars": 725.00,
    "explanation": {
      "mae": "Maximum loss during trade: 5.5 points = $275.00",
      "mfe": "Maximum profit potential during trade: 14.5 points = $725.00",
      "efficiency": "Captured 65.5% of the maximum favorable move",
      "riskReward": "Risk/Reward ratio: 2.64:1"
    }
  }
}
```

### 2. Test with Real Databento Data

Test with actual market data (requires API key):

```bash
GET /api/test-mae-mfe?real=true&symbol=ES
```
### 3. Automated Cron Job

The main cron job processes trades from the previous week:

```bash
GET /api/cron/compute-trade-data
```

This endpoint:
- Fetches all trades from last week
- Groups them by instrument
- Retrieves historical data from Databento
- Computes MAE/MFE for each trade
- Saves results to the TradeAnalytics table

### 4. Custom Trade Analysis

Analyze specific trades via POST request:

```bash
POST /api/test-mae-mfe
Content-Type: application/json

{
  "trade": {
    "id": "your-trade-id",
    "instrument": "ES",
    "entryPrice": "4500.00",
    "closePrice": "4520.00", 
    "entryDate": "2024-01-15T09:30:00.000Z",
    "closeDate": "2024-01-15T11:30:00.000Z",
    "side": "BUY",
    "quantity": 2
  }
}
```

## Understanding the Results

### Key Metrics Explained

**MAE (Maximum Adverse Excursion)**
- Shows the worst-case scenario during the trade
- Helps evaluate stop-loss placement
- Lower MAE suggests better entry timing

**MFE (Maximum Favorable Excursion)**  
- Shows the best profit opportunity during the trade
- Helps evaluate exit timing
- Higher MFE with similar final P&L suggests premature exits

**Risk/Reward Ratio**
- MFE ÷ MAE
- Higher ratios indicate better trade selection
- Values > 2.0 are generally considered good

**Efficiency**
- Percentage of maximum favorable move captured
- (Actual P&L ÷ MFE) × 100
- Higher values indicate better exit timing

### Practical Applications

1. **Stop Loss Optimization**: Use MAE data to set appropriate stop losses
2. **Exit Strategy**: Use MFE data to improve profit-taking decisions  
3. **Position Sizing**: Use MAE for risk-based position sizing
4. **Strategy Evaluation**: Compare MAE/MFE across different setups

## Data Quality Checks

The system includes several data validation features:

### Price Discrepancy Detection
Compares your reported entry price with actual market data:
```javascript
priceDifference = |entryPrice - marketEntryPrice|
```

Significant discrepancies (> 0.5 points) are flagged and may indicate:
- Broker data feed issues
- Timezone mismatches  
- Data latency problems
- Slippage in execution

### Error Handling
- Graceful fallback when Databento data unavailable
- Retry logic for API failures
- Comprehensive logging for debugging

## Databento API Details

### Data Schema Used
- **Dataset**: GLBX.MDP3 (CME Globex Level 1)
- **Schema**: ohlcv-1m (1-minute OHLCV bars)
- **Symbol Type**: continuous (front month contracts)

### Rate Limiting
- Built-in 1-second delays between instrument requests
- Respects Databento API rate limits
- Error handling for quota exceeded scenarios

## Troubleshooting

### Common Issues

**"DATABENTO_API_KEY is not configured"**
- Ensure API key is set in environment variables
- Check spelling and format of the environment variable

**"No historical data available"**
- Verify the symbol is supported
- Check if trading date falls on market holiday
- Ensure date range is valid

**"Price discrepancies detected"**
- Review timezone settings
- Check data feed reliability
- Verify trade execution times

### Debug Mode

Enable detailed logging by setting:
```bash
NODE_ENV=development
```

## Cost Considerations

Databento charges based on data usage:
- Historical data requests incur costs
- Consider batching requests by date range
- Monitor usage in Databento dashboard
- Implement caching for frequently accessed data

## Next Steps

1. **Set up your Databento API key**
2. **Run database migrations**
3. **Test with mock data first**: `GET /api/test-mae-mfe`
4. **Test with real data**: `GET /api/test-mae-mfe?real=true`
5. **Schedule the cron job** for weekly processing
6. **Analyze your trade analytics** using the new data

## Support

For issues related to:
- **Databento API**: Check [Databento Documentation](https://databento.com/docs)
- **Symbol Mapping**: See the `FUTURES_SYMBOL_MAP` in `/lib/databento.ts`
- **Database Issues**: Run `npx prisma studio` to inspect data

The system is designed to provide valuable insights into your trading performance through precise MAE/MFE analysis using high-quality market data. 
