---
description: 
globs: 
alwaysApply: true
---
When you generate content always use translations.

I have translations files [fr.ts](mdc:locales/fr.ts) and [en.ts](mdc:locales/en.ts).

Key Patterns:
1. Translation Hook Usage:
   - Import and use `useI18n` hook: `const t = useI18n()`
   - Use the `t` function for all text content: `t('namespace.key')`

2. Translation Structure:
   - Use nested namespaces for organization (e.g., 'propFirm.card.title')
   - Group related translations under common namespaces
   - Use descriptive keys that reflect the content's purpose

3. Dynamic Content:
   - Use template literals for dynamic values: `t('key', { variable: value })`
   - Example: `t('propFirm.configurator.title', { accountNumber: account.accountNumber })`

4. Common Patterns:
   - UI Elements: Use translations for all visible text
   - Status Messages: Translate all status indicators
   - Error Messages: Include translations for error states
   - Button Labels: Translate all button text
   - Form Labels: Translate all form field labels
   - Toast Messages: Include translations for notifications

5. Best Practices:
   - Keep translation keys consistent across components
   - Use meaningful namespaces that reflect component structure
   - Include translations for both success and error states
   - Translate all user-facing text, including placeholders
   - Use translations for tooltips and help text

Example Usage:
```typescript
// Import the translation hook
import { useI18n } from "@/locales/client"

// Use in component
const t = useI18n()

// Basic translation
<CardTitle>{t('propFirm.title')}</CardTitle>

// Translation with variables
<DialogTitle>{t('propFirm.configurator.title', { accountNumber: account.accountNumber })}</DialogTitle>

// Status messages
{isConsistent ? t('propFirm.status.consistent') : t('propFirm.status.inconsistent')}

// Toast messages
toast({
  title: t('propFirm.payout.deleteSuccess'),
  description: t('propFirm.payout.deleteSuccessDescription'),
  variant: "default"
})
```

This rule ensures consistent translation usage across the application and maintains a clear structure for internationalization.