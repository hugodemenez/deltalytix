import { NextResponse } from "next/server"
import { PrismaClient } from "@prisma/client"
import { Resend } from 'resend'
import { headers } from 'next/headers'
import TraderStatsEmail from "@/components/emails/weekly-recap"
import MissingYouEmail from "@/components/emails/missing-data"
import { openai } from "@ai-sdk/openai"
import { streamObject } from "ai"
import { z } from "zod"

const prisma = new PrismaClient()
const resend = new Resend(process.env.RESEND_API_KEY)

export async function POST(
  req: Request,
  { params }: { params: { userid: string } }
) {
  try {
    // Verify that this is a legitimate request with the correct secret
    const headersList = headers()
    const authHeader = headersList.get('authorization')
    
    if (authHeader !== `Bearer ${process.env.CRON_SECRET}`) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    // Get the user
    const user = await prisma.user.findUnique({
      where: { id: params.userid },
    })

    if (!user) {
      return NextResponse.json(
        { error: 'User not found' },
        { status: 404 }
      )
    }

    // get the newsletter config for this user based on email
    const newsletter = await prisma.newsletter.findUnique({
      where: { email: user.email },
    })

    if (!newsletter || !newsletter.isActive) {
      return NextResponse.json(
        { error: 'User not found or not subscribed to newsletter' },
        { status: 404 }
      )
    }

    // Get user's trades from last 14 days
    const trades = await prisma.trade.findMany({
      where: {
        userId: user.id,
        entryDate: {
          gte: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString()
        }
      },
    })

    const unsubscribeUrl = `https://deltalytix.app/api/email/unsubscribe?email=${encodeURIComponent(user.email)}`

    // If no trades, send missing you email
    if (trades.length === 0) {
      const result = await resend.emails.send({
        from: 'Deltalytix <newsletter@eu.updates.deltalytix.app>',
        to: [newsletter.email],
        subject: 'Nous manquons de vous voir sur Deltalytix',
        react: MissingYouEmail({
          firstName: newsletter.firstName || 'trader',
          email: newsletter.email,
        }),
      })

      return NextResponse.json({
        success: true,
        message: 'Missing you email sent successfully',
        id: result.data?.id
      })
    }

    // Calculate statistics
    const winLossStats = trades.reduce((acc, trade) => {
      if (trade.pnl > 0) {
        acc.wins++
      } else {
        acc.losses++
      }
      return acc
    }, { wins: 0, losses: 0 })

    const dailyPnL = trades.reduce((acc, trade) => {
      const tradeDate = new Date(trade.entryDate)
      const date = tradeDate.toLocaleDateString('fr-FR', {
        day: '2-digit',
        month: '2-digit'
      })
      
      const weekday = (tradeDate.getDay() + 6) % 7
      if (weekday > 4) return acc

      const existingEntry = acc.find(entry => entry.date === date)
      if (existingEntry) {
        existingEntry.pnl = Number((existingEntry.pnl + trade.pnl - trade.commission).toFixed(2))
      } else {
        acc.push({
          date,
          pnl: Number((trade.pnl - trade.commission).toFixed(2)),
          weekday
        })
      }
      return acc
    }, [] as { date: string, pnl: number, weekday: number }[])

    // Sort by date
    dailyPnL.sort((a, b) => {
      const [dayA, monthA] = a.date.split('/').map(Number)
      const [dayB, monthB] = b.date.split('/').map(Number)
      const currentYear = new Date().getFullYear()
      const dateObjA = new Date(currentYear, monthA - 1, dayA)
      const dateObjB = new Date(currentYear, monthB - 1, dayB)
      return dateObjA.getTime() - dateObjB.getTime()
    })

    // Generate AI analysis
    const DELTALYTIX_CONTEXT = `Deltalytix est une plateforme web pour day traders de futures, avec une interface intuitive et personnalisable. ConÃ§ue Ã  partir de mon expÃ©rience personnelle en tant que day trader de futures, utilisant des stratÃ©gies de scalping, elle propose des fonctionnalitÃ©s comme la gestion de multiple compte, le suivi des challenges propfirms, et des tableaux de bord personnalisables. Notre but est de fournir aux traders des analyses approfondies sur leurs habitudes de trading pour optimiser leurs stratÃ©gies et amÃ©liorer leur prise de dÃ©cision.`

    const analysisSchema = z.object({
      intro: z.string().describe("Une analyse trÃ¨s courte (1 phrase) des performances de la semaine"),
      tips: z.string().describe("Des conseils concis (environ 18 mots) pour amÃ©liorer les performances de la semaine prochaine")
    })

    const thisWeekPnL = dailyPnL.reduce((sum, day) => sum + day.pnl, 0)
    const profitableDays = dailyPnL.filter(day => day.pnl > 0).length
    const totalDays = dailyPnL.length

    const formatPnL = (value: number): string => {
      if (Math.abs(value) >= 1000) {
        return `${(value / 1000).toFixed(1)}K`
      }
      return value.toFixed(Math.abs(value) < 10 ? 2 : 1)
    }

    let analysis = {
      resultAnalysisIntro: "Voici vos statistiques de trading de la semaine.",
      tipsForNextWeek: "Continuez Ã  appliquer votre stratÃ©gie avec discipline et Ã  analyser vos trades pour progresser."
    }

    try {
      const { partialObjectStream } = await streamObject({
        model: openai("gpt-4-turbo-preview"),
        schema: analysisSchema,
        prompt: `Tu es un expert en trading qui analyse les performances hebdomadaires des traders.
${DELTALYTIX_CONTEXT}

Ta tÃ¢che est de gÃ©nÃ©rer deux Ã©lÃ©ments distincts basÃ©s sur ces mÃ©triques de trading :

DonnÃ©es de performance :
- PnL total : ${formatPnL(thisWeekPnL)}â‚¬
- Jours profitables : ${profitableDays}/${totalDays}

Directives pour l'analyse (intro) :
1. GÃ©nÃ¨re UNE SEULE phrase d'analyse des performances, avec un ton encourageant
2. Sois direct et factuel
3. Mentionne le point le plus important de la semaine
4. Maximum 30 mots concernant l'analyse

Directives pour les conseils (tips) :
1. SuggÃ¨re une action spÃ©cifique utilisant les fonctionnalitÃ©s de Deltalytix
2. Environ 18 mots
3. Mentionne un outil concret de la plateforme (tableaux de bord, gestion de compte, suivi de challenge, analyses)
4. Relie le conseil aux performances de la semaine
5. Sois prÃ©cis et actionnable

GÃ©nÃ¨re une analyse personnalisÃ©e basÃ©e sur ces donnÃ©es :`,
        temperature: 0.7,
      })

      let content = { intro: "", tips: "" }
      for await (const partialObject of partialObjectStream) {
        if (partialObject.intro) content.intro = partialObject.intro
        if (partialObject.tips) content.tips = partialObject.tips
      }

      if (content.intro && content.tips) {
        analysis = {
          resultAnalysisIntro: content.intro,
          tipsForNextWeek: content.tips
        }
      }
    } catch (error) {
      console.error('Error generating analysis:', error)
    }

    // Send the email
    const result = await resend.emails.send({
      from: 'Deltalytix <newsletter@eu.updates.deltalytix.app>',
      to: [user.email],
      subject: 'Vos statistiques de trading de la semaine ðŸ“ˆ',
      react: TraderStatsEmail({
        firstName: newsletter.firstName || 'trader',
        dailyPnL,
        winLossStats,
        email: newsletter.email,
        resultAnalysisIntro: analysis.resultAnalysisIntro,
        tipsForNextWeek: analysis.tipsForNextWeek
      }),
      headers: {
        'List-Unsubscribe': `<${unsubscribeUrl}>`,
        'List-Unsubscribe-Post': 'List-Unsubscribe=One-Click'
      },
      replyTo: 'hugo.demenez@deltalytix.app'
    })

    return NextResponse.json({
      success: true,
      message: 'Weekly summary email sent successfully',
      id: result.data?.id
    })

  } catch (error) {
    console.error('API error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
