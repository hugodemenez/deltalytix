generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model Trade {
  id             String   @id @unique @default(uuid())
  accountNumber  String
  quantity       Int
  entryId        String?  @default("")
  closeId        String?  @default("")
  instrument     String
  entryPrice     String
  closePrice     String
  entryDate      String
  closeDate      String
  pnl            Float
  timeInPosition Float    @default(0)
  userId         String
  side           String?  @default("")
  commission     Float    @default(0)
  createdAt      DateTime @default(now())
  comment        String?
  imageBase64    String?
  videoUrl       String?
  tags           Tag[]    @relation("TradeToTag")

  @@index([accountNumber])
  @@schema("public")
}

model TickDetails {
  id        String @id @unique @default(uuid())
  ticker    String
  tickValue Float
  tickSize  Float

  @@schema("public")
}

model Subscription {
  id          String                 @id @unique @default(uuid())
  email       String                 @unique
  plan        String
  createdAt   DateTime               @default(now())
  userId      String                 @unique
  endDate     DateTime?
  status      String                 @default("ACTIVE")
  trialEndsAt DateTime?
  user        User                   @relation(fields: [userId], references: [id])
  feedback    SubscriptionFeedback[]

  @@index([email])
  @@schema("public")
}

model Notification {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String
  createdAt   DateTime  @default(now())
  readAt      DateTime?
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@schema("public")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  auth_user_id    String           @unique
  accounts        Account[]
  dashboardLayout DashboardLayout?
  moods           Mood[]
  notifications   Notification[]
  subscriptions   Subscription?
  tags            Tag[]

  @@index([email])
  @@schema("public")
}

model Account {
  id                    String    @id @unique @default(uuid())
  number                String
  propfirm              String    @default("")
  drawdownThreshold     Float     @default(0)
  profitTarget          Float     @default(0)
  isPerformance         Boolean   @default(false)
  userId                String
  createdAt             DateTime  @default(now())
  startingBalance       Float     @default(0)
  payoutCount           Int       @default(0)
  trailingDrawdown      Boolean   @default(false)
  trailingStopProfit    Float?
  resetDate             DateTime?
  consistencyPercentage Float?    @default(30)
  user                  User      @relation(fields: [userId], references: [id])
  payouts               Payout[]

  @@unique([number, userId])
  @@index([number])
  @@schema("public")
}

model Payout {
  id            String   @id @default(uuid())
  amount        Float
  date          DateTime
  createdAt     DateTime @default(now())
  status        String   @default("PENDING")
  accountNumber String
  accountId     String
  account       Account  @relation(fields: [accountId], references: [id])

  @@index([accountNumber])
  @@schema("public")
}

model DashboardLayout {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  desktop   Json     @default("[]")
  mobile    Json     @default("[]")
  user      User     @relation(fields: [userId], references: [auth_user_id])

  @@index([userId])
  @@schema("public")
}

model SubscriptionFeedback {
  id                 String       @id @default(uuid())
  email              String
  event              String
  createdAt          DateTime     @default(now())
  cancellationReason String?
  feedback           String?
  subscription       Subscription @relation(fields: [email], references: [email])

  @@index([email])
  @@schema("public")
}

model Mood {
  id           String   @id @default(uuid())
  userId       String
  day          DateTime
  mood         String
  conversation Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([day])
  @@schema("public")
}

model Shared {
  id             String    @id @default(uuid())
  userId         String
  slug           String    @unique
  title          String?
  description    String?
  createdAt      DateTime  @default(now())
  expiresAt      DateTime?
  isPublic       Boolean   @default(true)
  viewCount      Int       @default(0)
  accountNumbers String[]
  dateRange      Json
  desktop        Json      @default("[]")
  mobile         Json      @default("[]")

  @@index([userId])
  @@index([slug])
  @@schema("public")
}

model FinancialEvent {
  id          String   @id @default(uuid())
  title       String
  date        DateTime
  importance  String
  type        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sourceUrl   String?

  @@index([date])
  @@schema("public")
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  color       String?  @default("#CBD5E1")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  trades      Trade[]  @relation("TradeToTag")

  @@index([userId])
  @@schema("public")
}


